<!DOCTYPE html>
<html>
<head>
	<!-- <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests"> -->
	<title>API</title>
	
	<link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">
	<link rel="icon" href="./favicon.ico">
	<style type="text/css">
		* {
			margin: 0;
			padding: 0;
		}
		html, body, #app {
			height: 100%;
			overflow: hidden;
		}
		/* 滚动槽 */
		::-webkit-scrollbar {
		  width: 6px;
		  height: 6px;
		}

		::-webkit-scrollbar-track {
		  border-radius: 3px;
		  background: rgba(0, 0, 0, 0);
		  -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, .08);
		  box-shadow: inset 0 0 5px rgba(0, 0, 0, .08);
		}

		/* 滚动条滑块 */
		::-webkit-scrollbar-thumb {
		  border-radius: 3px;
		  background: #e9ebf4;
		  -webkit-box-shadow: inset 0 0 10px rgba(0, 0, 0, .2);
		  box-shadow: inset 0 0 5px rgba(0, 0, 0, .08);
		}

		/* 数据展示样式 */
		.json-view-container {
		  background-color: #fff;
		}
		.json-view-container .json-view {
		  position: relative;
		  display: block;
		  width: 100%;
		  height: 100%;
		  white-space: nowrap;
		  padding-left: 2rem;
		  -webkit-box-sizing: border-box;
		  box-sizing: border-box;
		  font-family: Consolas !important;
		  cursor: default;
		}
		.json-view-container .json-view .json-note {
		  color: #909399;
		  font-size: 12px;
		  font-style: italic;
		}
		.json-view-container .json-view .json-key {
		  color: #8c6325;
		}
		.json-view-container .json-view .json-value {
		  word-break: break-all;
		  display: inline-block;
		  /*max-width: 40vw;*/
		  white-space: normal;
		  color: #57b73b;
		}
		.json-view-container .json-view .json-value.number {
		  color: #2d8cf0;
		}
		.json-view-container .json-view .json-value.string {
		  color: #57b73b;
		}
		.json-view-container .json-view .json-value.boolean {
		  color: #eb3324;
		}
		.json-view-container .json-view .json-value.null {
		  color: #eb3324;
		}
		.json-view-container .json-view .json-item {
		  margin: 0;
		  padding-left: 2rem;
		  display: -webkit-box;
		  display: -ms-flexbox;
		  display: flex;
		}
		.json-view-container .json-view .first-line {
		  padding: 0;
		  margin: 0;
		}
		.json-view-container .json-view .first-line.pointer {
		  cursor: pointer!important;
		}
		.json-view-container .json-view .json-body {
		  position: relative;
		  padding: 0;
		  margin: 0;
		}
		.json-view-container .json-view .json-body .base-line {
		  position: absolute;
		  height: 100%;
		  border-left: 1px dashed #bbb;
		  top: 0;
		  left: 2px;
		}
		.json-view-container .json-view .last-line {
		  padding: 0;
		  margin: 0;
		}
		.json-view-container .json-view .angle {
		  position: absolute;
		  display: block;
		  cursor: pointer;
		  float: left;
		  width: 20px;
		  text-align: center;
		  left: 12px;
		}

		.history-item {
			position: relative;
			display: flex;
			align-items: center;
			padding: 8px;
			font-size: 12px;
			cursor: pointer;
		}
		.method {
			padding: 0 10px;
			width: 44px;
			flex: 0 0 44px;
			font-weight: bold;
			text-align: center;
		}
		.get {
			color: #f56c6c;
		}
		.post {
			color: #e6a23c;
		}
		.btn-box {
			display: none;
			align-items: center;
			position: absolute;
			top: 0;
			bottom: 0;
			right: 0;
			padding: 0 10px;
		}
		.history-item.active {
			background: #ECF5FF;
		}
		.history-item:hover {
			background: rgb(226, 235, 245)
		}
		.history-item:hover .btn-box {
			display: flex;
			background: inherit;
		}


		textarea {
			font-family: Consolas
		}

		.el-tabs__item:focus.is-active.is-focus:not(:active){
			box-shadow: none;
		}

		div.el-table__empty-block {
			display: none;
		}

		.empty-history:after {
			content: '历史记录为空，请开始您的请求之旅';
			display: block;
			padding-top: 120px;
			text-align: center;
			color: #999;
		}

		/*.el-tabs--card .el-tabs__item {
			position: relative;
			max-width: 200px;
			overflow: hidden;
		}
		.el-tabs--card>.el-tabs__header .el-tabs__item span.el-icon-close {
			position: absolute;
			top: 50%;
			right: 20px;
			margin-top: -8px;
			width: 16px;
			height: 16px;

		}*/
		
	</style>
</head>
<body>
	
	<div id="app"></div>
	<template id="main">
		<div id="app">
			<el-container style="height: 100%">
			  <el-header style="background: #424242;"></el-header>
			  <el-container style="overflow:hidden">
			    <el-aside width="360px" style="border-right: 1px solid #ddd"
			    	:class="{'empty-history': requestHistory.length === 0}">
			    	<div class="history-item" v-for="(item, i) in requestHistory"
			    		:class="{'active': historyIndex === i}" 
			    		@click="historyClick(item, i)">
			    		<span :class="['method', item.method]">{{item.method | method2UpperCase}}</span>
			    		<div class="name" 
			    			style="flex:1;word-break: break-all;white-space: normal;color:#666">
				    		{{item.name}}
				    	</div>
				    	<div class="btn-box">
						
				    	<!-- <svg t="1570685263929" 
					    		class="icon" 
					    		viewBox="0 0 1024 1024" 
					    		version="1.1" 
					    		xmlns="http://www.w3.org/2000/svg" 
					    		p-id="5449" 
					    		width="18" 
					    		height="18"
					    		style="fill:#e6a23c">
					    		<path 
					    			d="M725.333333 128H213.333333c-47.146667 0-85.333333 38.186667-85.333333 85.333333v597.333334c0 47.146667 38.186667 85.333333 85.333333 85.333333h597.333334c47.146667 0 85.333333-38.186667 85.333333-85.333333V298.666667l-170.666667-170.666667zM512 810.666667c-70.613333 0-128-57.386667-128-128s57.386667-128 128-128 128 57.386667 128 128-57.386667 128-128 128z m128-426.666667H213.333333v-170.666667h426.666667v170.666667z" p-id="5450"> -->
				    		<i class="el-icon-delete-solid" 
				    			style="margin-left:12px;font-size: 16px;color:#f56c6c"
				    			@click="delHistory(i)"></i>
				    	</div>
			    	</div>
			    </el-aside>
			    <el-main>
			    	<!-- @tab-click="collapseNames=['1', '2']" -->
			    	<el-tabs 
			    		v-show="tabs.length"
			    		v-model="tabIndex" 
			    		type="card" 
			    		editable 
			    		@tab-add="addTab"
			    		@tab-remove="delTab">
						  <el-tab-pane
						  	v-for="(item, i) in tabs"
						    :label="item.name | handleTabTitle"
						    :name="`${i}`">
							  <div style="display: flex">
								  <div style="flex:1">
									  <el-input v-model="item.url"
									  	placeholder="请输入接口地址" 
									  	clearable>
									    <el-select v-model="item.method"
									    	slot="prepend" 
									    	placeholder="请选择" 
									    	style="width:130px"
									    	@change="changeMethod($event, item)">
									      <el-option label="GET" value="get"></el-option>
									      <el-option label="POST" value="post"></el-option>
									    </el-select>
									  </el-input>
									</div>
								  <el-button-group style="margin-left: 12px">
								  	<el-button type="primary" @click="submitRequest(item)">发送</el-button>
								  	<el-button type="success">保存</el-button>
								  </el-button-group>
							  </div>
							  <el-collapse v-model="collapseNames" style="border: none">
								  <el-collapse-item title="Request" name="1">
										<el-tabs value="1">
									    <el-tab-pane label="Headers" name="1">
									    	<el-table	:data="item.headersTable" border>
									    		<el-table-column label="KEY">
									    			<template v-slot="{row, $index}">
												      <el-input v-model="row.key" 
																:ref="'head-input-' + $index"
												      	size="small" 
												      	clearable
													      autofocus></el-input>
												    </template>
									    		</el-table-column>
									    		<el-table-column label="VALUE">
									    			<template v-slot="{row, $index}">
												      <el-input v-model="row.value" size="small" clearable></el-input>
												    </template>
									    		</el-table-column>
									    		<el-table-column label='操作' width='80' align="center">
									    			<template v-slot="{$index}">
												      <i class="el-icon-close" 
												      	style="font-size: 22px;cursor: pointer;"
												      	@click="delFields(item, $index, 'headersTable')"></i>
												    </template>
									    		</el-table-column>
									    	</el-table>
									    	<el-table :show-header="false"	
										    		:data="[item.headerItem]"
										    		style="border-top:none" 
										    		border>
														<el-table-column>
										    			<template v-slot="{row}">
													      <!-- <el-input 
													      	v-model="row.key" 
													      	@input="insertHeader($event, item)"
													      	size="small" clearable></el-input> -->
												      	<el-autocomplete style="width:100%"
													      	v-model="row.key"
													      	@input="insertHeader($event, item)"
													      	:fetch-suggestions="headFields" 
													      	size="small" clearable></el-autocomplete>
													    </template>
										    		</el-table-column>
										    		<el-table-column>
										    			<template v-slot="{row, $index}">
													      <el-input v-model="row.value" size="small" clearable></el-input>
													    </template>
										    		</el-table-column>
										    		<el-table-column width='80'></el-table-column>
										    	</el-table>
									    </el-tab-pane>
									    <el-tab-pane label="Params/Body" name="2">
									    	<el-radio-group v-model="item.paramType" style="margin-bottom: 15px">
											    <el-radio label="params"></el-radio>
											    <el-radio label="body" :disabled="item.method==='get'"></el-radio>
								  			</el-radio-group>
									    	<el-input	
									    		v-if="item.paramType==='body'"
									    		type="textarea" 
									    		v-model="item.bodyContent"
									    		placeholder="内容必须为严格的JSON格式"
									    		:rows="12"
									    		resize="none"></el-input>
									    	<div v-else>
										    	<el-table :data="item.paramsTable" border>
										    		<el-table-column label="KEY">
										    			<template v-slot="{row, $index}">
													      <el-input v-model="row.key" 
													      	:ref="'param-input-' + $index"
													      	size="small" 
													      	clearable></el-input>
													    </template>
										    		</el-table-column>
										    		<el-table-column label="VALUE">
										    			<template v-slot="{row, $index}">
													      <el-input v-model="row.value" size="small" clearable></el-input>
													    </template>
										    		</el-table-column>
										    		<el-table-column label='操作' width='80' align="center">
										    			<template v-slot="{$index}">
													      <i class="el-icon-close" 
													      	style="font-size: 22px;cursor: pointer;"
													      	@click="delFields(item, $index, 'paramsTable')"></i>
													    </template>
										    		</el-table-column>
										    	</el-table>
										    	<el-table :show-header="false"	
										    		:data="[item.paramItem]"
										    		style="border-top:none" 
										    		border>
														<el-table-column>
										    			<template v-slot="{row}">
													      <el-input 
													      	v-model="row.key" 
													      	@input="insertParam($event, item)"
													      	size="small" clearable></el-input>
													    </template>
										    		</el-table-column>
										    		<el-table-column>
										    			<template v-slot="{row, $index}">
													      <el-input v-model="row.value" size="small" clearable></el-input>
													    </template>
										    		</el-table-column>
										    		<el-table-column width='80'>
										    			
										    		</el-table-column>
										    	</el-table>
										    </div>

									    </el-tab-pane>
									  </el-tabs>
								  </el-collapse-item>
								  <el-collapse-item title="Response" name="2">
									  <div style="padding:10px;min-height:120px;border:1px solid #E4E7ED"
											v-loading="item.loading" element-loading-text="拼命请求中...">
											<json-view v-show='item.jsonData' :data="item.jsonData"></json-view>
										</div>
								  </el-collapse-item>
								</el-collapse>
						  </el-tab-pane>
						</el-tabs>
			    </el-main>
			  </el-container>
			</el-container>
		</div>
	</template>
	<template id="json-view">
		<div :class="['json-view-container',theme]">
      <div :class="['json-view', length ? 'closeable' : '']"
        :style="{font_size:font_size+'px',line_height:line_height+'px'}">
        <!--icon-style-square-->
        <span @click="toggleClose"
          class="angle"
          v-if="length && icon_style==='square'">
          <svg v-if="innerclosed"
            :fill="icon_colors[0]"
            width="1em"
            height="1em"
            viewBox="0 0 1792 1792"
            style="vertical-align: middle; color: rgb(42, 161, 152); height: 1em; width: 1em;">
            <path d="M1344 800v64q0 14-9 23t-23 9h-352v352q0 14-9 23t-23 9h-64q-14 0-23-9t-9-23v-352h-352q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h352v-352q0-14 9-23t23-9h64q14 0 23 9t9 23v352h352q14 0 23 9t9 23zm128 448v-832q0-66-47-113t-113-47h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z"></path>
          </svg>
          <svg v-if="!innerclosed"
            :fill="icon_colors[1]"
            width="1em"
            height="1em"
            viewBox="0 0 1792 1792"
            style="vertical-align: middle; color: rgb(88, 110, 117); height: 1em; width: 1em;">
            <path d="M1344 800v64q0 14-9 23t-23 9h-832q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h832q14 0 23 9t9 23zm128 448v-832q0-66-47-113t-113-47h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z"></path>
          </svg>
        </span>
        <!--icon-style-circle-->
        <span @click="toggleClose"
          class="angle"
          v-if="length&& icon_style==='circle'">
          <svg v-if="!innerclosed"
            viewBox="0 0 24 24"
            :fill="icon_colors[0]"
            preserveAspectRatio="xMidYMid meet"
            style="vertical-align: middle; color: rgb(1, 160, 228); height: 1em; width: 1em;">
            <path d="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7"></path>
          </svg>
          <svg v-if="innerclosed"
            viewBox="0 0 24 24"
            :fill="icon_colors[1]"
            preserveAspectRatio="xMidYMid meet"
            style="vertical-align: middle; color: rgb(161, 106, 148); height: 1em; width: 1em;">
            <path d="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z"></path>
          </svg>
        </span>
        <!--icon-style-triangle-->
        <span @click="toggleClose"
          class="angle"
          v-if="length&& icon_style==='triangle'">
          <svg v-if="!innerclosed"
            viewBox="0 0 15 15"
            :fill="icon_colors[0]"
            style="vertical-align: top; color: #3c4047; height: 1em; width: 1em; padding-left: 2px;">
            <path d="M0 5l6 6 6-6z"></path>
          </svg>
          <svg v-if="innerclosed"
            viewBox="0 0 15 15"
            :fill="icon_colors[1]"
            style="vertical-align: top; color: #3c4047; height: 1em; width: 1em; padding-left: 2px;">
            <path d="M0 14l6-6-6-6z"></path>
          </svg>
        </span>
        <div class="content-wrap">
          <p :class="['first-line',length>0?'pointer':'']"
            @click="toggleClose">
            <span v-if="json_key"
              class="json-key">"{{json_key}}": </span>
            <span v-if="length">{{prefix}}{{innerclosed ? ('...' + subfix) : ''}}
              <span class="json-note">{{innerclosed ? (length+' items') : ''}}</span>
            </span>
            <span v-if="!length">{{isArray ? '[],' : '{},'}}</span>
          </p>
          <div v-if="!innerclosed && length"
            class="json-body">
            <template v-for="(item, index) in items">
              <json-view :closed="isClose(templateDeep+1)"
                v-if="item.isJSON"
                :key="index"
                :data="item.value"
                :json_key="item.key"
                :current_deep="templateDeep+1"
                :deep="deep"
                :icon_style="icon_style"
                :theme="theme"
                :font_size="font_size"
                :line_height="line_height"
                :icon_color="icon_colors"
                :is_last="index === items.length - 1">
              </json-view>
              <p class="json-item"
                v-else
                :key="index">
                <span class="json-key">
                  {{(isArray ? '' : '"' + item.key + '":')}}
                </span>
                <span :class="['json-value',getDataType(item.value)]">{{`${typeof item.value==='string'?'"':''}${item.value}${typeof item.value==='string'?'"':''}${index ===items.length - 1 ? '' : ','}`}}</span>
              </p>
            </template>
            <span v-if="!innerclosed"
              class="base-line"></span>
          </div>
          <p v-if="!innerclosed "
            class="last-line">
            <span>{{subfix}}</span>
          </p>
        </div>
      </div>
    </div>
	</template>
	<script src="https://cdn.jsdelivr.net/npm/vue@2.6.1"></script>

	<script src="https://unpkg.com/element-ui/lib/index.js"></script>
	<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
	<script type="text/javascript">
		!function() {
			// ['Cookie', 'User-Agent', 'Content-Type', 'Host', 'Authorization', 
			// 'Referer', 'Accept-Charset', 'Accept-Encoding', 'token']

			function getStorage(key) {
				return JSON.parse(localStorage.getItem(key))
			}
			function setStorage(key, value) {
				localStorage.setItem(key, JSON.stringify(value))
			}

			function cloneData(data) {
				return JSON.parse(JSON.stringify(data))
			}

			function newTab() {
				return {
					name: 'New Api',
					url: '',
					method: 'get',
					paramType: 'params',
					bodyContent: '',
					paramsTable: [],
					headersTable: [],
					paramItem: { key: '', value: '' },
					headerItem: { key: '', value: '' },
					jsonData: '',
					loading: false
				}
			}

			var JsonView = {
			  template: '#json-view',
			  name: 'jsonView',
			  props: {
			    data: { // 传入的json数据
			      type: [Object, Array],
			      required: true
			    },
			    json_key: { // json的key值，用于第二层及二层以上的组件的key值
			      type: String,
			      default: ''
			    },
			    closed: { // 是否折叠
			      type: Boolean,
			      default: false
			    },
			    is_last: { //是否是最后一行
			      type: Boolean,
			      default: true
			    },
			    font_size: { //字体大小
			      type: Number,
			      default: 14
			    },
			    line_height: { //杭高
			      type: Number,
			      default: 24
			    },
			    deep: { // 展开深度
			      type: Number,
			      default: 3
			    },
			    current_deep: { // 当前为递归的第几层
			      type: Number,
			      default: 1
			    },
			    icon_style: { // 折叠icon样式
			      type: String,
			      default: 'square'
			    },
			    icon_color: { //icon颜色
			      type: Array,
			      default() {
			        return []
			      }
			    },
			    theme: { // 主题
			      type: String,
			      default: ''
			    }
			  },
			  data() {
			    return {
			      innerclosed: true,
			      templateDeep: 1
			    };
			  },
			  computed: {
			    isArray() {
			      return this.getDataType(this.data) === 'array';
			    },
			    length() {
			      return this.isArray ? this.data.length : Object.keys(this.data).length;
			    },
			    subfix() {
			      const data = this.data;
			      if (this.isEmptyArrayOrObject(data)) {// 如果是空数组或空对象
			        return '';
			      } else {
			        return (this.isArray ? ']' : '}') + (this.is_last ? '' : ',');
			      }
			    },
			    prefix() {
			      return this.isArray ? '[' : '{';
			    },
			    items() {
			      // JSON.parse(JSON.stringify(this.data))
			      const json = this.data;
			      if (this.isArray) {
			        return json.map(item => {
			          const isJSON = this.isObjectOrArray(item);
			          return {
			            value: item,
			            isJSON,
			            key: ''
			          };
			        });
			      }
			      return Object.keys(json).map(key => {
			        const item = json[key];
			        const isJSON = this.isObjectOrArray(item);
			        return {
			          value: item,
			          isJSON,
			          key
			        };
			      });
			    },
			    icon_colors() {
			      const { theme, icon_color } = this;
			      if (icon_color.length === 2) {
			        return icon_color;
			      } else {
			        if (theme === 'one-dark') {
			          return ['#747983', '#747983'];
			        } else if (theme === 'vs-code') {
			          return ['#c6c6c6', '#c6c6c6'];
			        } else {
			          return ['#747983', '#747983'];
			        }
			      }
			    }
			  },
			  mounted() {
			    this.innerclosed = this.closed;
			    this.templateDeep = this.current_deep;
			  },
			  methods: {
			    getDataType(data) {
			      return Object.prototype.toString.call(data).slice(8, -1).toLowerCase();
			    },
			    isObjectOrArray(source) {
			      return ['array', 'object'].includes(this.getDataType(source));
			    },
			    toggleClose() {
			      if (this.length === 0) {
			        return;
			      }
			      if (this.innerclosed) {
			        this.innerclosed = false;
			      } else {
			        this.innerclosed = true;
			      }
			    },
			    isClose(curDeep) {
			      return curDeep > this.deep;
			    },
			    isEmptyArrayOrObject(data) {// 空数组或者空对象
			      return [{}, []].map(item => JSON.stringify(item)).includes(JSON.stringify(data));
			    }
			  },
			  watch: {
			    closed() {
			      this.innerclosed = this.closed;
			    }
			  }
			}
			var App = {
				template: '#main',
				components: { JsonView },
				data() {
					return {
						requestHistory: getStorage('RH') || [],
						tabs: [ newTab() ],
						collapseNames: ['1', '2'],
						historyIndex: -1,
						tabIndex: '0'
					}
				},
				filters: {
					method2UpperCase(v) {
						return v ? v.toUpperCase() : ''
					},
					handleTabTitle(v) {
						if(!v) return ''
						if(v.length <= 24) return v
						return v.slice(0, 21) + '...'
					}
				},
				created() {

				},
				methods: {
					// 头部字段选择列表（ElementUI属性值）
					headFields(query, cb) {
						cb([
							{value: 'Content-Type'},
							{value: 'Cookie'},
							{value: 'Authorization'}
						])
					},

					// 点击历史记录
					historyClick(item, index) {
						this.historyIndex = index
						let i = this.tabs.findIndex(t => t.url === item.url)
						if(i === -1) {
							this.tabs.push(cloneData(item))
							this.tabIndex = String(this.tabs.length - 1)
						}else {
							this.tabIndex = String(i)
						}
					},

					// 更改请求方式
					changeMethod(val, item) {
						if(val === 'get') { // get请求只能用params发送数据给服务器
							item.paramType = 'params'
						}
					},

					// 输入自动插入字段
					insertParam(val, item) {
						if(val.trim() === '') return
						let l = item.paramsTable.length
						item.paramsTable.push({key: val, value: item.paramItem.value})
						item.paramItem.key = ''
						item.paramItem.value = ''
						this.$nextTick(() => {
							let lastIndex = this.$refs[`param-input-${l}`].length - 1
							this.$refs[`param-input-${l}`][lastIndex].focus()
						})
					},

					// 输入自动插入头部信息
					insertHeader(val, item) {
						if(val.trim() === '') return
						let l = item.headersTable.length
						item.headersTable.push({key: val, value: item.headerItem.value})
						item.headerItem.key = ''
						item.headerItem.value = ''
						this.$nextTick(() => {
							let lastIndex = this.$refs[`head-input-${l}`].length - 1
							this.$refs[`head-input-${l}`][lastIndex].focus()
						})
					},

					// 获取发送的参数数据
					getParams(item) {
						let json2formData = json => Object.keys(json).map(k => `${k}=${json[k]}`).join('&')
						let getData = list => list.reduce((ret, item) => {

							// 可扩展一个必填的属性
							if(item.key.trim() !== '') {
								ret[item.key] = item.value
							}
							return ret
						}, {})
						let {method, bodyContent, paramType, paramsTable, headersTable} = item
						try {
							if(paramType === 'body') {
								bodyContent = bodyContent.trim() === '' ? {} : JSON.parse(bodyContent)
							}
						} catch(err) {
							this.$message.error('请求体中(body)的内容必须为严格的JSON格式')
							return false
						}

						return paramType === 'body' 
							? bodyContent
							: method === 'get'
								? getData(paramsTable)
								: json2formData(getData(paramsTable))
					},

					// 获取Headers信息
					getHeaders({headersTable}) {
						return headersTable.reduce((ret, item) => {

							// 可扩展一个必填的属性
							if(item.key.trim() !== '') {
								ret[item.key] = item.value
							}
							return ret
						}, {})
					},

					// 删除历史记录
					delHistory(i) {
						this.requestHistory.splice(i, 1)
						setStorage('RH', this.requestHistory)
					},

					// 添加新请求(添加tab)
					addTab() {
						this.tabs.push(newTab())
						this.tabIndex = String(this.tabs.length - 1)
					},

					// 删除tab菜单
					delTab(name) {
						let currentIndex = Number(this.tabIndex)
						let index = Number(name)
						let l = this.tabs.length
						l === 1 
							? this.tabs.splice(index, 1, newTab())
							: this.tabs.splice(index, 1)
						
						// 删除项小于当前项或者删除的项是当前项且是最后一项且项目数量大于1，就把当前项目索引设置为前一项
						if(index < currentIndex || (l > 1 && index === l - 1 && index === currentIndex)) {
							this.tabIndex = String(currentIndex - 1)
						}
					},

					// 删除字段
					delFields(item, i, key) {
						item[key].splice(i, 1)
					},

					// 存储/更新请求
					cacheRequest(item) {
						let i = this.requestHistory.findIndex(it => it.url === item.url)
						let cloneItem = cloneData(item)
						cloneItem.jsonData = ''
						i === -1 
							? this.requestHistory.push(cloneItem)
							: this.requestHistory.splice(i, 1, cloneItem)
						setStorage('RH', this.requestHistory)
					},

					// 提交请求
					submitRequest(item) {
						if(item.url.trim() === '') return this.$message('请输入接口地址！')
						item.name = item.url
						this.cacheRequest(item)
						let params = this.getParams(item)
						if(!params) return
						let headers = this.getHeaders(item)
						let { url, method } = item
						let options = { url, method, headers }
						options[method === 'get' ? 'params' : 'data'] = params
						item.loading = true
						axios.post(
							location.port === '3002' ? '/proxy' : 'http://zengyuanqiu.xicp.io/proxy', 
							options
						).then(res => {
								item.jsonData = res.data
								item.loading = false
							})
							// .catch(err => item.jsonData = {err})
					}
				}
			}
			
			new Vue({
				render: h => h(App)
			}).$mount("#app");
		}()
	</script>
</body>
</html>